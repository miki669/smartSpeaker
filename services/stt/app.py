import queue
import sounddevice as sd
import vosk
import sys
import json
import os
import threading

# üß† –°–ª–æ–≤–∞-–∞–∫—Ç–∏–≤–∞—Ç–æ—Ä—ã
WAKE_WORDS = ["–∫–æ–ª–æ–Ω–∫–∞", "–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ø—Ä–∏–≤–µ—Ç", "–ø–æ–º–æ—â–Ω–∏–∫"]

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model_path = "model/vosk-model-small-ru-0.22"
if not os.path.exists(model_path):
    print(f"‚ùå Model not found at: {model_path}")
    sys.exit(1)

model = vosk.Model(model_path)
recognizer = vosk.KaldiRecognizer(model, 16000)
q = queue.Queue()

# üí¨ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
listening_command = threading.Event()

def callback(indata, frames, time, status):
    if status:
        print("‚ö†Ô∏è", status, file=sys.stderr)
    q.put(bytes(indata))

def process_stream():
    print("üéô –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞. –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...")

    with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                           channels=1, callback=callback):
        while True:
            data = q.get()
            if listening_command.is_set():
                # –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥—ã
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    text = result.get("text", "").strip()
                    if text:
                        print("üó£ –ö–æ–º–∞–Ω–¥–∞:", text)
                        print("üîÅ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...\n")
                        listening_command.clear()
                        print("üéô –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞...")
            else:
                # –û–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    text = result.get("text", "").lower()
                    if text:
                        print("üßæ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", text)
                    if any(word in text for word in WAKE_WORDS):
                        print("‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ. –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É...")
                        listening_command.set()

if __name__ == "__main__":
    try:
        process_stream()
    except KeyboardInterrupt:
        print("\n‚õî –í—ã—Ö–æ–¥")
