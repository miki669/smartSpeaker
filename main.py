import subprocess
import sounddevice as sd
import soundfile as sf
import os

TEXT = "–ü—Ä–∏–≤–µ—Ç"
PIPER_EXE = "piper/piper.exe"
MODEL_ONNX = "piper/denis.onnx"
CONFIG_JSON = "piper/denis-onnx.json"   # üëà –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –º–æ–¥–µ–ª–µ–π –æ—Ç OHF-Voice
OUTPUT_WAV = "output.wav"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
for path in [PIPER_EXE, MODEL_ONNX, CONFIG_JSON]:
    if not os.path.exists(path):
        raise FileNotFoundError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {path}")

# –ó–∞–ø—É—Å–∫
print(f"[INFO] –û–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: {TEXT}")
result = subprocess.run([
    PIPER_EXE,
    "--model", MODEL_ONNX,
    "--config", CONFIG_JSON,         # üëà –î–æ–±–∞–≤–ª–µ–Ω config
    "--output_file", OUTPUT_WAV,
    "--text", TEXT
], capture_output=True, text=True)

print("[DEBUG] STDOUT:\n", result.stdout)
print("[DEBUG] STDERR:\n", result.stderr)

if result.returncode != 0:
    print(f"[ERROR] Piper –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
    exit(1)

# –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
data, samplerate = sf.read(OUTPUT_WAV)
sd.play(data, samplerate)
sd.wait()
